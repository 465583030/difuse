// automatically generated by the FlatBuffers compiler, do not modify

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Inode struct {
	_tab flatbuffers.Table
}

func GetRootAsInode(buf []byte, offset flatbuffers.UOffsetT) *Inode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Inode{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Inode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Inode) Id(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Inode) IdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Inode) IdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Inode) Size() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Inode) MutateSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Inode) Inline() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Inode) MutateInline(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Inode) Blocks(obj *ByteSlice, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ByteSlice)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Inode) BlocksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func InodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func InodeAddId(builder *flatbuffers.Builder, Id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Id), 0)
}
func InodeStartIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func InodeAddSize(builder *flatbuffers.Builder, Size int64) {
	builder.PrependInt64Slot(1, Size, 0)
}
func InodeAddInline(builder *flatbuffers.Builder, Inline byte) {
	builder.PrependByteSlot(2, Inline, 0)
}
func InodeAddBlocks(builder *flatbuffers.Builder, Blocks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Blocks), 0)
}
func InodeStartBlocksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func InodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
