// automatically generated by the FlatBuffers compiler, do not modify

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VnodeIdsBytes struct {
	_tab flatbuffers.Table
}

func GetRootAsVnodeIdsBytes(buf []byte, offset flatbuffers.UOffsetT) *VnodeIdsBytes {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VnodeIdsBytes{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *VnodeIdsBytes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VnodeIdsBytes) Ids(obj *ByteSlice, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ByteSlice)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *VnodeIdsBytes) IdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VnodeIdsBytes) B(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VnodeIdsBytes) BLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VnodeIdsBytes) BBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func VnodeIdsBytesStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VnodeIdsBytesAddIds(builder *flatbuffers.Builder, Ids flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Ids), 0)
}
func VnodeIdsBytesStartIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func VnodeIdsBytesAddB(builder *flatbuffers.Builder, B flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(B), 0)
}
func VnodeIdsBytesStartBVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VnodeIdsBytesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
