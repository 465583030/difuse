// automatically generated by the FlatBuffers compiler, do not modify

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VnodeIdBytesErr struct {
	_tab flatbuffers.Table
}

func GetRootAsVnodeIdBytesErr(buf []byte, offset flatbuffers.UOffsetT) *VnodeIdBytesErr {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VnodeIdBytesErr{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *VnodeIdBytesErr) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VnodeIdBytesErr) Id(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VnodeIdBytesErr) IdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VnodeIdBytesErr) IdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *VnodeIdBytesErr) B(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VnodeIdBytesErr) BLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VnodeIdBytesErr) BBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *VnodeIdBytesErr) E() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func VnodeIdBytesErrStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func VnodeIdBytesErrAddId(builder *flatbuffers.Builder, Id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Id), 0)
}
func VnodeIdBytesErrStartIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VnodeIdBytesErrAddB(builder *flatbuffers.Builder, B flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(B), 0)
}
func VnodeIdBytesErrStartBVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VnodeIdBytesErrAddE(builder *flatbuffers.Builder, E flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(E), 0)
}
func VnodeIdBytesErrEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
