// Code generated by protoc-gen-go.
// source: net.proto
// DO NOT EDIT!

/*
Package netrpc is a generated protocol buffer package.

It is generated from these files:
	net.proto

It has these top-level messages:
*/
package netrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chord "github.com/ipkg/go-chord"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DifuseRPC service

type DifuseRPCClient interface {
	GetTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	AppendTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	LastTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	StatServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	GetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	SetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	DeleteBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	ReplicateBlocksServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_ReplicateBlocksServeClient, error)
	ReplicateTxServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_ReplicateTxServeClient, error)
	LookupLeaderServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
}

type difuseRPCClient struct {
	cc *grpc.ClientConn
}

func NewDifuseRPCClient(cc *grpc.ClientConn) DifuseRPCClient {
	return &difuseRPCClient{cc}
}

func (c *difuseRPCClient) GetTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/GetTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) AppendTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/AppendTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) LastTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/LastTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) StatServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/StatServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) GetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/GetBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) SetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/SetBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) DeleteBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/DeleteBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) ReplicateBlocksServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_ReplicateBlocksServeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DifuseRPC_serviceDesc.Streams[0], c.cc, "/netrpc.DifuseRPC/ReplicateBlocksServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &difuseRPCReplicateBlocksServeClient{stream}
	return x, nil
}

type DifuseRPC_ReplicateBlocksServeClient interface {
	Send(*chord.Payload) error
	CloseAndRecv() (*chord.Payload, error)
	grpc.ClientStream
}

type difuseRPCReplicateBlocksServeClient struct {
	grpc.ClientStream
}

func (x *difuseRPCReplicateBlocksServeClient) Send(m *chord.Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *difuseRPCReplicateBlocksServeClient) CloseAndRecv() (*chord.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(chord.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *difuseRPCClient) ReplicateTxServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_ReplicateTxServeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DifuseRPC_serviceDesc.Streams[1], c.cc, "/netrpc.DifuseRPC/ReplicateTxServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &difuseRPCReplicateTxServeClient{stream}
	return x, nil
}

type DifuseRPC_ReplicateTxServeClient interface {
	Send(*chord.Payload) error
	CloseAndRecv() (*chord.Payload, error)
	grpc.ClientStream
}

type difuseRPCReplicateTxServeClient struct {
	grpc.ClientStream
}

func (x *difuseRPCReplicateTxServeClient) Send(m *chord.Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *difuseRPCReplicateTxServeClient) CloseAndRecv() (*chord.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(chord.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *difuseRPCClient) LookupLeaderServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/LookupLeaderServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DifuseRPC service

type DifuseRPCServer interface {
	GetTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	AppendTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	LastTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	StatServe(context.Context, *chord.Payload) (*chord.Payload, error)
	GetBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	SetBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	DeleteBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	ReplicateBlocksServe(DifuseRPC_ReplicateBlocksServeServer) error
	ReplicateTxServe(DifuseRPC_ReplicateTxServeServer) error
	LookupLeaderServe(context.Context, *chord.Payload) (*chord.Payload, error)
}

func RegisterDifuseRPCServer(s *grpc.Server, srv DifuseRPCServer) {
	s.RegisterService(&_DifuseRPC_serviceDesc, srv)
}

func _DifuseRPC_GetTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/GetTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_AppendTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).AppendTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/AppendTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).AppendTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_LastTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).LastTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/LastTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).LastTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_StatServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).StatServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/StatServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).StatServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_GetBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/GetBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_SetBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).SetBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/SetBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).SetBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_DeleteBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).DeleteBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/DeleteBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).DeleteBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_ReplicateBlocksServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DifuseRPCServer).ReplicateBlocksServe(&difuseRPCReplicateBlocksServeServer{stream})
}

type DifuseRPC_ReplicateBlocksServeServer interface {
	SendAndClose(*chord.Payload) error
	Recv() (*chord.Payload, error)
	grpc.ServerStream
}

type difuseRPCReplicateBlocksServeServer struct {
	grpc.ServerStream
}

func (x *difuseRPCReplicateBlocksServeServer) SendAndClose(m *chord.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *difuseRPCReplicateBlocksServeServer) Recv() (*chord.Payload, error) {
	m := new(chord.Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DifuseRPC_ReplicateTxServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DifuseRPCServer).ReplicateTxServe(&difuseRPCReplicateTxServeServer{stream})
}

type DifuseRPC_ReplicateTxServeServer interface {
	SendAndClose(*chord.Payload) error
	Recv() (*chord.Payload, error)
	grpc.ServerStream
}

type difuseRPCReplicateTxServeServer struct {
	grpc.ServerStream
}

func (x *difuseRPCReplicateTxServeServer) SendAndClose(m *chord.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *difuseRPCReplicateTxServeServer) Recv() (*chord.Payload, error) {
	m := new(chord.Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DifuseRPC_LookupLeaderServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).LookupLeaderServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/LookupLeaderServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).LookupLeaderServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

var _DifuseRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netrpc.DifuseRPC",
	HandlerType: (*DifuseRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxServe",
			Handler:    _DifuseRPC_GetTxServe_Handler,
		},
		{
			MethodName: "AppendTxServe",
			Handler:    _DifuseRPC_AppendTxServe_Handler,
		},
		{
			MethodName: "LastTxServe",
			Handler:    _DifuseRPC_LastTxServe_Handler,
		},
		{
			MethodName: "StatServe",
			Handler:    _DifuseRPC_StatServe_Handler,
		},
		{
			MethodName: "GetBlockServe",
			Handler:    _DifuseRPC_GetBlockServe_Handler,
		},
		{
			MethodName: "SetBlockServe",
			Handler:    _DifuseRPC_SetBlockServe_Handler,
		},
		{
			MethodName: "DeleteBlockServe",
			Handler:    _DifuseRPC_DeleteBlockServe_Handler,
		},
		{
			MethodName: "LookupLeaderServe",
			Handler:    _DifuseRPC_LookupLeaderServe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReplicateBlocksServe",
			Handler:       _DifuseRPC_ReplicateBlocksServe_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReplicateTxServe",
			Handler:       _DifuseRPC_ReplicateTxServe_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "net.proto",
}

func init() { proto.RegisterFile("net.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0xd2, 0xbf, 0x6a, 0xc3, 0x30,
	0x10, 0x06, 0xf0, 0x06, 0x4a, 0xc0, 0x57, 0x5a, 0x52, 0xd1, 0x29, 0x63, 0xa6, 0x2c, 0x91, 0xe8,
	0xdf, 0xa1, 0x5b, 0xdb, 0x40, 0x16, 0x0f, 0x21, 0xee, 0x0b, 0x28, 0xd2, 0xd5, 0x16, 0x56, 0x7d,
	0x42, 0x3e, 0x97, 0xf6, 0x41, 0xfa, 0xbe, 0x05, 0x53, 0x3c, 0x64, 0x92, 0xc6, 0x83, 0xef, 0xc7,
	0x1d, 0xc7, 0x07, 0x45, 0x87, 0x2c, 0x43, 0x24, 0x26, 0x31, 0xef, 0x90, 0x63, 0x30, 0xcb, 0x55,
	0xed, 0xb8, 0x19, 0x8e, 0xd2, 0xd0, 0xa7, 0x72, 0xa1, 0xad, 0x55, 0x4d, 0x1b, 0xd3, 0x50, 0xb4,
	0x6a, 0xca, 0xde, 0xfd, 0x9e, 0x43, 0xb1, 0x75, 0x1f, 0x43, 0x8f, 0x87, 0xfd, 0x9b, 0x90, 0x00,
	0x3b, 0xe4, 0xf7, 0xef, 0x0a, 0xe3, 0x17, 0x8a, 0x2b, 0x39, 0xa6, 0xe5, 0x5e, 0xff, 0x78, 0xd2,
	0x76, 0x79, 0x32, 0xaf, 0xce, 0xc4, 0x2d, 0x5c, 0xbe, 0x84, 0x80, 0x9d, 0x4d, 0x27, 0x0a, 0x2e,
	0x4a, 0xdd, 0x67, 0xec, 0xd8, 0x40, 0x51, 0xb1, 0xe6, 0x8c, 0x93, 0x76, 0xc8, 0xaf, 0x9e, 0x4c,
	0x9b, 0x41, 0xaa, 0x4c, 0xf2, 0x00, 0x8b, 0x2d, 0x7a, 0x64, 0xcc, 0x52, 0xcf, 0x70, 0x73, 0xc0,
	0xe0, 0x9d, 0xd1, 0xff, 0xb0, 0x4f, 0x94, 0xeb, 0x99, 0x78, 0x82, 0xc5, 0x64, 0x93, 0x9f, 0xb7,
	0x9e, 0x89, 0x47, 0xb8, 0x2e, 0x89, 0xda, 0x21, 0x94, 0xa8, 0x2d, 0xc6, 0x44, 0x78, 0x9c, 0x8f,
	0xf5, 0xb8, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x4f, 0xd8, 0xd9, 0x57, 0x02, 0x00, 0x00,
}
