// Code generated by protoc-gen-go.
// source: net.proto
// DO NOT EDIT!

/*
Package netrpc is a generated protocol buffer package.

It is generated from these files:
	net.proto

It has these top-level messages:
*/
package netrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chord "github.com/ipkg/go-chord"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DifuseRPC service

type DifuseRPCClient interface {
	GetTxKeyServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	SetModeTxKeyServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	GetTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	AppendTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	ProposeTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	LastTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	MerkleRootTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	// Transaction slice of a key from a given seek point
	TransactionsServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (DifuseRPC_TransactionsServeClient, error)
	StatServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	SetInodeServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	DeleteInodeServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	GetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	SetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	DeleteBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	ReplicateBlocksServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_ReplicateBlocksServeClient, error)
	// Transfer keys from local to remote vnode.
	TransferTxKeysServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_TransferTxKeysServeClient, error)
	LookupLeaderServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
}

type difuseRPCClient struct {
	cc *grpc.ClientConn
}

func NewDifuseRPCClient(cc *grpc.ClientConn) DifuseRPCClient {
	return &difuseRPCClient{cc}
}

func (c *difuseRPCClient) GetTxKeyServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/GetTxKeyServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) SetModeTxKeyServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/SetModeTxKeyServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) GetTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/GetTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) AppendTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/AppendTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) ProposeTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/ProposeTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) LastTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/LastTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) MerkleRootTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/MerkleRootTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) TransactionsServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (DifuseRPC_TransactionsServeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DifuseRPC_serviceDesc.Streams[0], c.cc, "/netrpc.DifuseRPC/TransactionsServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &difuseRPCTransactionsServeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DifuseRPC_TransactionsServeClient interface {
	Recv() (*chord.Payload, error)
	grpc.ClientStream
}

type difuseRPCTransactionsServeClient struct {
	grpc.ClientStream
}

func (x *difuseRPCTransactionsServeClient) Recv() (*chord.Payload, error) {
	m := new(chord.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *difuseRPCClient) StatServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/StatServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) SetInodeServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/SetInodeServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) DeleteInodeServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/DeleteInodeServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) GetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/GetBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) SetBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/SetBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) DeleteBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/DeleteBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) ReplicateBlocksServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_ReplicateBlocksServeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DifuseRPC_serviceDesc.Streams[1], c.cc, "/netrpc.DifuseRPC/ReplicateBlocksServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &difuseRPCReplicateBlocksServeClient{stream}
	return x, nil
}

type DifuseRPC_ReplicateBlocksServeClient interface {
	Send(*chord.Payload) error
	CloseAndRecv() (*chord.Payload, error)
	grpc.ClientStream
}

type difuseRPCReplicateBlocksServeClient struct {
	grpc.ClientStream
}

func (x *difuseRPCReplicateBlocksServeClient) Send(m *chord.Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *difuseRPCReplicateBlocksServeClient) CloseAndRecv() (*chord.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(chord.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *difuseRPCClient) TransferTxKeysServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_TransferTxKeysServeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DifuseRPC_serviceDesc.Streams[2], c.cc, "/netrpc.DifuseRPC/TransferTxKeysServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &difuseRPCTransferTxKeysServeClient{stream}
	return x, nil
}

type DifuseRPC_TransferTxKeysServeClient interface {
	Send(*chord.Payload) error
	CloseAndRecv() (*chord.Payload, error)
	grpc.ClientStream
}

type difuseRPCTransferTxKeysServeClient struct {
	grpc.ClientStream
}

func (x *difuseRPCTransferTxKeysServeClient) Send(m *chord.Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *difuseRPCTransferTxKeysServeClient) CloseAndRecv() (*chord.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(chord.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *difuseRPCClient) LookupLeaderServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/netrpc.DifuseRPC/LookupLeaderServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DifuseRPC service

type DifuseRPCServer interface {
	GetTxKeyServe(context.Context, *chord.Payload) (*chord.Payload, error)
	SetModeTxKeyServe(context.Context, *chord.Payload) (*chord.Payload, error)
	GetTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	AppendTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	ProposeTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	LastTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	MerkleRootTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	// Transaction slice of a key from a given seek point
	TransactionsServe(*chord.Payload, DifuseRPC_TransactionsServeServer) error
	StatServe(context.Context, *chord.Payload) (*chord.Payload, error)
	SetInodeServe(context.Context, *chord.Payload) (*chord.Payload, error)
	DeleteInodeServe(context.Context, *chord.Payload) (*chord.Payload, error)
	GetBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	SetBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	DeleteBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	ReplicateBlocksServe(DifuseRPC_ReplicateBlocksServeServer) error
	// Transfer keys from local to remote vnode.
	TransferTxKeysServe(DifuseRPC_TransferTxKeysServeServer) error
	LookupLeaderServe(context.Context, *chord.Payload) (*chord.Payload, error)
}

func RegisterDifuseRPCServer(s *grpc.Server, srv DifuseRPCServer) {
	s.RegisterService(&_DifuseRPC_serviceDesc, srv)
}

func _DifuseRPC_GetTxKeyServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetTxKeyServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/GetTxKeyServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetTxKeyServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_SetModeTxKeyServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).SetModeTxKeyServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/SetModeTxKeyServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).SetModeTxKeyServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_GetTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/GetTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_AppendTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).AppendTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/AppendTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).AppendTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_ProposeTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).ProposeTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/ProposeTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).ProposeTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_LastTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).LastTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/LastTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).LastTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_MerkleRootTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).MerkleRootTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/MerkleRootTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).MerkleRootTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_TransactionsServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(chord.Payload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DifuseRPCServer).TransactionsServe(m, &difuseRPCTransactionsServeServer{stream})
}

type DifuseRPC_TransactionsServeServer interface {
	Send(*chord.Payload) error
	grpc.ServerStream
}

type difuseRPCTransactionsServeServer struct {
	grpc.ServerStream
}

func (x *difuseRPCTransactionsServeServer) Send(m *chord.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func _DifuseRPC_StatServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).StatServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/StatServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).StatServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_SetInodeServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).SetInodeServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/SetInodeServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).SetInodeServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_DeleteInodeServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).DeleteInodeServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/DeleteInodeServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).DeleteInodeServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_GetBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/GetBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_SetBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).SetBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/SetBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).SetBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_DeleteBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).DeleteBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/DeleteBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).DeleteBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_ReplicateBlocksServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DifuseRPCServer).ReplicateBlocksServe(&difuseRPCReplicateBlocksServeServer{stream})
}

type DifuseRPC_ReplicateBlocksServeServer interface {
	SendAndClose(*chord.Payload) error
	Recv() (*chord.Payload, error)
	grpc.ServerStream
}

type difuseRPCReplicateBlocksServeServer struct {
	grpc.ServerStream
}

func (x *difuseRPCReplicateBlocksServeServer) SendAndClose(m *chord.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *difuseRPCReplicateBlocksServeServer) Recv() (*chord.Payload, error) {
	m := new(chord.Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DifuseRPC_TransferTxKeysServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DifuseRPCServer).TransferTxKeysServe(&difuseRPCTransferTxKeysServeServer{stream})
}

type DifuseRPC_TransferTxKeysServeServer interface {
	SendAndClose(*chord.Payload) error
	Recv() (*chord.Payload, error)
	grpc.ServerStream
}

type difuseRPCTransferTxKeysServeServer struct {
	grpc.ServerStream
}

func (x *difuseRPCTransferTxKeysServeServer) SendAndClose(m *chord.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *difuseRPCTransferTxKeysServeServer) Recv() (*chord.Payload, error) {
	m := new(chord.Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DifuseRPC_LookupLeaderServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).LookupLeaderServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netrpc.DifuseRPC/LookupLeaderServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).LookupLeaderServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

var _DifuseRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netrpc.DifuseRPC",
	HandlerType: (*DifuseRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxKeyServe",
			Handler:    _DifuseRPC_GetTxKeyServe_Handler,
		},
		{
			MethodName: "SetModeTxKeyServe",
			Handler:    _DifuseRPC_SetModeTxKeyServe_Handler,
		},
		{
			MethodName: "GetTxServe",
			Handler:    _DifuseRPC_GetTxServe_Handler,
		},
		{
			MethodName: "AppendTxServe",
			Handler:    _DifuseRPC_AppendTxServe_Handler,
		},
		{
			MethodName: "ProposeTxServe",
			Handler:    _DifuseRPC_ProposeTxServe_Handler,
		},
		{
			MethodName: "LastTxServe",
			Handler:    _DifuseRPC_LastTxServe_Handler,
		},
		{
			MethodName: "MerkleRootTxServe",
			Handler:    _DifuseRPC_MerkleRootTxServe_Handler,
		},
		{
			MethodName: "StatServe",
			Handler:    _DifuseRPC_StatServe_Handler,
		},
		{
			MethodName: "SetInodeServe",
			Handler:    _DifuseRPC_SetInodeServe_Handler,
		},
		{
			MethodName: "DeleteInodeServe",
			Handler:    _DifuseRPC_DeleteInodeServe_Handler,
		},
		{
			MethodName: "GetBlockServe",
			Handler:    _DifuseRPC_GetBlockServe_Handler,
		},
		{
			MethodName: "SetBlockServe",
			Handler:    _DifuseRPC_SetBlockServe_Handler,
		},
		{
			MethodName: "DeleteBlockServe",
			Handler:    _DifuseRPC_DeleteBlockServe_Handler,
		},
		{
			MethodName: "LookupLeaderServe",
			Handler:    _DifuseRPC_LookupLeaderServe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransactionsServe",
			Handler:       _DifuseRPC_TransactionsServe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReplicateBlocksServe",
			Handler:       _DifuseRPC_ReplicateBlocksServe_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferTxKeysServe",
			Handler:       _DifuseRPC_TransferTxKeysServe_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "net.proto",
}

func init() { proto.RegisterFile("net.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0xd3, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x07, 0xf0, 0xaf, 0x97, 0x7e, 0x74, 0xa4, 0xc5, 0xac, 0x9e, 0x7a, 0xec, 0xc9, 0x4b, 0x13,
	0x5b, 0x2d, 0xa2, 0x37, 0xb5, 0x20, 0x62, 0x0a, 0x21, 0xe9, 0x0b, 0x6c, 0x77, 0xa7, 0x69, 0x48,
	0xdc, 0x59, 0x36, 0x13, 0xb1, 0x4f, 0xe1, 0x2b, 0x0b, 0x51, 0x7a, 0xf0, 0xb4, 0x7b, 0x5c, 0x98,
	0x1f, 0xfb, 0x67, 0xf6, 0xbf, 0x30, 0x32, 0xc8, 0xb1, 0x75, 0xc4, 0x24, 0x86, 0x06, 0xd9, 0x59,
	0x35, 0x9d, 0x95, 0x15, 0x1f, 0xba, 0x5d, 0xac, 0xe8, 0x3d, 0xa9, 0x6c, 0x5d, 0x26, 0x25, 0xcd,
	0xd5, 0x81, 0x9c, 0x4e, 0x4e, 0xb3, 0xcb, 0xaf, 0xff, 0x30, 0x5a, 0x57, 0xfb, 0xae, 0xc5, 0x3c,
	0x7b, 0x16, 0x0b, 0x18, 0xbf, 0x20, 0x6f, 0x3f, 0xdf, 0xf0, 0x58, 0xa0, 0xfb, 0x40, 0x31, 0x89,
	0x7b, 0x10, 0x67, 0xf2, 0xd8, 0x90, 0xd4, 0xd3, 0x3f, 0xe7, 0xd9, 0x3f, 0xb1, 0x82, 0xa8, 0x40,
	0xde, 0x90, 0xc6, 0x20, 0x16, 0x03, 0xf4, 0x37, 0xf9, 0xce, 0x2f, 0x60, 0xfc, 0x68, 0x2d, 0x1a,
	0xed, 0x4f, 0x96, 0x30, 0xc9, 0x1c, 0x59, 0x6a, 0xd1, 0xdf, 0x24, 0x70, 0x96, 0xca, 0x36, 0x20,
	0xd7, 0x0a, 0xa2, 0x0d, 0xba, 0xba, 0xc1, 0x9c, 0x28, 0x80, 0xdd, 0x41, 0xb4, 0x75, 0xd2, 0xb4,
	0x52, 0x71, 0x45, 0xa6, 0xf5, 0x64, 0xd7, 0x03, 0x31, 0x87, 0x51, 0xc1, 0x92, 0x03, 0xd6, 0x56,
	0x20, 0xbf, 0x1a, 0xd2, 0xe8, 0x4b, 0x6e, 0xe1, 0x7c, 0x8d, 0x0d, 0x32, 0x06, 0xa9, 0x9f, 0xe6,
	0x3c, 0x35, 0xa4, 0xea, 0xb0, 0x6c, 0x41, 0xe4, 0x94, 0x2d, 0x48, 0x3d, 0xc0, 0x65, 0x8e, 0xb6,
	0xa9, 0x94, 0xfc, 0x85, 0xbe, 0xfb, 0xbe, 0x1a, 0x88, 0x7b, 0xb8, 0xe8, 0x1f, 0x6a, 0x8f, 0xae,
	0xef, 0x77, 0x00, 0x5d, 0x41, 0x94, 0x12, 0xd5, 0x9d, 0x4d, 0x51, 0x6a, 0x74, 0x9e, 0x70, 0x37,
	0xec, 0x3f, 0xe6, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x3f, 0xdc, 0x87, 0xd1, 0x03,
	0x00, 0x00,
}
