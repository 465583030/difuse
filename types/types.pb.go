// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	RequestOptions
	ResponseMeta
	VnodeBytes
	VnodeTx
	TxBlock
	TxHeader
	Tx
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chord "github.com/ipkg/go-chord"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TxBlockMode int32

const (
	TxBlockMode_NORMAL     TxBlockMode = 0
	TxBlockMode_TRANSITION TxBlockMode = 1
	TxBlockMode_TAKEOVER   TxBlockMode = 2
	TxBlockMode_OFFLINE    TxBlockMode = 3
)

var TxBlockMode_name = map[int32]string{
	0: "NORMAL",
	1: "TRANSITION",
	2: "TAKEOVER",
	3: "OFFLINE",
}
var TxBlockMode_value = map[string]int32{
	"NORMAL":     0,
	"TRANSITION": 1,
	"TAKEOVER":   2,
	"OFFLINE":    3,
}

func (x TxBlockMode) String() string {
	return proto.EnumName(TxBlockMode_name, int32(x))
}
func (TxBlockMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Consistency int32

const (
	Consistency_LAZY   Consistency = 0
	Consistency_QUORUM Consistency = 1
	Consistency_ALL    Consistency = 2
)

var Consistency_name = map[int32]string{
	0: "LAZY",
	1: "QUORUM",
	2: "ALL",
}
var Consistency_value = map[string]int32{
	"LAZY":   0,
	"QUORUM": 1,
	"ALL":    2,
}

func (x Consistency) String() string {
	return proto.EnumName(Consistency_name, int32(x))
}
func (Consistency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RequestOptions struct {
	Consistency Consistency  `protobuf:"varint,1,opt,name=Consistency,json=consistency,enum=types.Consistency" json:"Consistency,omitempty"`
	PeerSetSize int32        `protobuf:"varint,2,opt,name=PeerSetSize,json=peerSetSize" json:"PeerSetSize,omitempty"`
	PeerSetKey  []byte       `protobuf:"bytes,3,opt,name=PeerSetKey,json=peerSetKey,proto3" json:"PeerSetKey,omitempty"`
	Source      *chord.Vnode `protobuf:"bytes,4,opt,name=Source,json=source" json:"Source,omitempty"`
}

func (m *RequestOptions) Reset()                    { *m = RequestOptions{} }
func (m *RequestOptions) String() string            { return proto.CompactTextString(m) }
func (*RequestOptions) ProtoMessage()               {}
func (*RequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestOptions) GetConsistency() Consistency {
	if m != nil {
		return m.Consistency
	}
	return Consistency_LAZY
}

func (m *RequestOptions) GetPeerSetSize() int32 {
	if m != nil {
		return m.PeerSetSize
	}
	return 0
}

func (m *RequestOptions) GetPeerSetKey() []byte {
	if m != nil {
		return m.PeerSetKey
	}
	return nil
}

func (m *RequestOptions) GetSource() *chord.Vnode {
	if m != nil {
		return m.Source
	}
	return nil
}

type ResponseMeta struct {
	Vnode   *chord.Vnode `protobuf:"bytes,1,opt,name=Vnode,json=vnode" json:"Vnode,omitempty"`
	KeyHash []byte       `protobuf:"bytes,2,opt,name=KeyHash,json=keyHash,proto3" json:"KeyHash,omitempty"`
}

func (m *ResponseMeta) Reset()                    { *m = ResponseMeta{} }
func (m *ResponseMeta) String() string            { return proto.CompactTextString(m) }
func (*ResponseMeta) ProtoMessage()               {}
func (*ResponseMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseMeta) GetVnode() *chord.Vnode {
	if m != nil {
		return m.Vnode
	}
	return nil
}

func (m *ResponseMeta) GetKeyHash() []byte {
	if m != nil {
		return m.KeyHash
	}
	return nil
}

type VnodeBytes struct {
	Vnode *chord.Vnode `protobuf:"bytes,1,opt,name=Vnode,json=vnode" json:"Vnode,omitempty"`
	Bytes []byte       `protobuf:"bytes,2,opt,name=Bytes,json=bytes,proto3" json:"Bytes,omitempty"`
}

func (m *VnodeBytes) Reset()                    { *m = VnodeBytes{} }
func (m *VnodeBytes) String() string            { return proto.CompactTextString(m) }
func (*VnodeBytes) ProtoMessage()               {}
func (*VnodeBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VnodeBytes) GetVnode() *chord.Vnode {
	if m != nil {
		return m.Vnode
	}
	return nil
}

func (m *VnodeBytes) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type VnodeTx struct {
	Vnode *chord.Vnode `protobuf:"bytes,1,opt,name=Vnode,json=vnode" json:"Vnode,omitempty"`
	Tx    *Tx          `protobuf:"bytes,3,opt,name=Tx,json=tx" json:"Tx,omitempty"`
}

func (m *VnodeTx) Reset()                    { *m = VnodeTx{} }
func (m *VnodeTx) String() string            { return proto.CompactTextString(m) }
func (*VnodeTx) ProtoMessage()               {}
func (*VnodeTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VnodeTx) GetVnode() *chord.Vnode {
	if m != nil {
		return m.Vnode
	}
	return nil
}

func (m *VnodeTx) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type TxBlock struct {
	Key  []byte   `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Mode int32    `protobuf:"varint,2,opt,name=Mode,json=mode" json:"Mode,omitempty"`
	TXs  [][]byte `protobuf:"bytes,3,rep,name=TXs,json=tXs,proto3" json:"TXs,omitempty"`
	Root []byte   `protobuf:"bytes,4,opt,name=Root,json=root,proto3" json:"Root,omitempty"`
}

func (m *TxBlock) Reset()                    { *m = TxBlock{} }
func (m *TxBlock) String() string            { return proto.CompactTextString(m) }
func (*TxBlock) ProtoMessage()               {}
func (*TxBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TxBlock) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TxBlock) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *TxBlock) GetTXs() [][]byte {
	if m != nil {
		return m.TXs
	}
	return nil
}

func (m *TxBlock) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type TxHeader struct {
	PrevHash    []byte `protobuf:"bytes,1,opt,name=PrevHash,json=prevHash,proto3" json:"PrevHash,omitempty"`
	Source      []byte `protobuf:"bytes,2,opt,name=Source,json=source,proto3" json:"Source,omitempty"`
	Destination []byte `protobuf:"bytes,3,opt,name=Destination,json=destination,proto3" json:"Destination,omitempty"`
	Timestamp   uint64 `protobuf:"varint,4,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Height      uint64 `protobuf:"varint,5,opt,name=Height,json=height" json:"Height,omitempty"`
}

func (m *TxHeader) Reset()                    { *m = TxHeader{} }
func (m *TxHeader) String() string            { return proto.CompactTextString(m) }
func (*TxHeader) ProtoMessage()               {}
func (*TxHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TxHeader) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *TxHeader) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *TxHeader) GetDestination() []byte {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *TxHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TxHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Tx struct {
	Header    *TxHeader `protobuf:"bytes,1,opt,name=Header,json=header" json:"Header,omitempty"`
	Signature []byte    `protobuf:"bytes,2,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
	Key       []byte    `protobuf:"bytes,3,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Data      []byte    `protobuf:"bytes,4,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Tx) GetHeader() *TxHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Tx) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Tx) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Tx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestOptions)(nil), "types.RequestOptions")
	proto.RegisterType((*ResponseMeta)(nil), "types.ResponseMeta")
	proto.RegisterType((*VnodeBytes)(nil), "types.VnodeBytes")
	proto.RegisterType((*VnodeTx)(nil), "types.VnodeTx")
	proto.RegisterType((*TxBlock)(nil), "types.TxBlock")
	proto.RegisterType((*TxHeader)(nil), "types.TxHeader")
	proto.RegisterType((*Tx)(nil), "types.Tx")
	proto.RegisterEnum("types.TxBlockMode", TxBlockMode_name, TxBlockMode_value)
	proto.RegisterEnum("types.Consistency", Consistency_name, Consistency_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0x51, 0x6e, 0x9b, 0x40,
	0x10, 0x86, 0x83, 0x01, 0x63, 0x0f, 0x28, 0x45, 0xab, 0xaa, 0xa2, 0x51, 0x54, 0x21, 0x54, 0xa9,
	0x56, 0xd4, 0x3a, 0x52, 0xda, 0x0b, 0x38, 0x4d, 0x22, 0x47, 0xc1, 0x26, 0x5d, 0x93, 0x28, 0xed,
	0x1b, 0xc1, 0x23, 0x1b, 0xb9, 0x66, 0x09, 0xbb, 0x8e, 0xa0, 0x07, 0xe9, 0x31, 0x7a, 0xc6, 0x6a,
	0x17, 0x1c, 0x37, 0x7d, 0xca, 0x13, 0x9a, 0x99, 0x9f, 0x7f, 0x7f, 0xbe, 0x61, 0xc1, 0x16, 0x75,
	0x81, 0x7c, 0x58, 0x94, 0x4c, 0x30, 0x62, 0xaa, 0xe2, 0x20, 0x58, 0x64, 0x62, 0xb9, 0xb9, 0x1f,
	0xa6, 0x6c, 0x7d, 0x9c, 0x15, 0xab, 0xc5, 0xf1, 0x82, 0x7d, 0x4a, 0x97, 0xac, 0x9c, 0x1f, 0xe7,
	0x28, 0x1a, 0x69, 0xf0, 0x47, 0x83, 0x7d, 0x8a, 0x0f, 0x1b, 0xe4, 0x22, 0x2a, 0x44, 0xc6, 0x72,
	0x4e, 0xbe, 0x80, 0xfd, 0x95, 0xe5, 0x3c, 0xe3, 0x02, 0xf3, 0xb4, 0xf6, 0x34, 0x5f, 0x1b, 0xec,
	0x9f, 0x90, 0x61, 0x73, 0xc0, 0x3f, 0x13, 0x6a, 0xa7, 0xbb, 0x82, 0xf8, 0x60, 0x5f, 0x23, 0x96,
	0x33, 0x14, 0xb3, 0xec, 0x17, 0x7a, 0x1d, 0x5f, 0x1b, 0x98, 0xd4, 0x2e, 0x76, 0x2d, 0xf2, 0x0e,
	0xa0, 0x55, 0x5c, 0x61, 0xed, 0xe9, 0xbe, 0x36, 0x70, 0x28, 0x14, 0x4f, 0x1d, 0xf2, 0x1e, 0xba,
	0x33, 0xb6, 0x29, 0x53, 0xf4, 0x0c, 0x5f, 0x1b, 0xd8, 0x27, 0xce, 0x50, 0x85, 0x1d, 0xde, 0xe6,
	0x6c, 0x8e, 0xb4, 0xcb, 0xd5, 0x2c, 0x08, 0xc1, 0xa1, 0xc8, 0x0b, 0x96, 0x73, 0x9c, 0xa0, 0x48,
	0x48, 0x00, 0xa6, 0x12, 0xa8, 0x9c, 0xff, 0xbf, 0x64, 0x3e, 0xca, 0x07, 0xf1, 0xc0, 0xba, 0xc2,
	0x7a, 0x9c, 0xf0, 0xa5, 0xca, 0xe5, 0x50, 0x6b, 0xd5, 0x94, 0xc1, 0x05, 0x80, 0x52, 0x9e, 0xd6,
	0x02, 0xf9, 0x8b, 0xbc, 0x5e, 0x83, 0xa9, 0xc4, 0xad, 0x93, 0x79, 0x2f, 0x8b, 0x60, 0x0c, 0x96,
	0x52, 0xc5, 0xd5, 0x8b, 0x4c, 0xde, 0x42, 0x27, 0xae, 0x14, 0x02, 0xfb, 0xa4, 0xdf, 0x92, 0x8d,
	0x2b, 0xda, 0x11, 0x55, 0x70, 0x03, 0x56, 0x5c, 0x9d, 0xfe, 0x64, 0xe9, 0x8a, 0xb8, 0xa0, 0x4b,
	0x52, 0x9a, 0x3a, 0x48, 0x5f, 0x61, 0x4d, 0x08, 0x18, 0x13, 0x69, 0xdd, 0xd0, 0x35, 0xd6, 0xd2,
	0xcb, 0x05, 0x3d, 0xbe, 0xe3, 0x9e, 0xee, 0xeb, 0x52, 0x25, 0xee, 0xb8, 0x54, 0x51, 0xc6, 0x84,
	0xc2, 0xe8, 0x50, 0xa3, 0x64, 0x4c, 0x04, 0xbf, 0x35, 0xe8, 0xc5, 0xd5, 0x18, 0x93, 0x39, 0x96,
	0xe4, 0x00, 0x7a, 0xd7, 0x25, 0x3e, 0x2a, 0x20, 0x8d, 0x7b, 0xaf, 0x68, 0x6b, 0xf2, 0xe6, 0x69,
	0x0b, 0xcd, 0x07, 0xb6, 0xdc, 0xe5, 0x7e, 0xcf, 0x90, 0x8b, 0x2c, 0x4f, 0xe4, 0x5f, 0xd2, 0xae,
	0xcf, 0x9e, 0xef, 0x5a, 0xe4, 0x10, 0xfa, 0x71, 0xb6, 0x46, 0x2e, 0x92, 0x75, 0xa1, 0xce, 0x36,
	0x68, 0x5f, 0x6c, 0x1b, 0xd2, 0x77, 0x8c, 0xd9, 0x62, 0x29, 0x3c, 0x53, 0x8d, 0xba, 0x4b, 0x55,
	0x05, 0x0f, 0x12, 0x05, 0xf9, 0x20, 0xa7, 0x32, 0x5b, 0x4b, 0xed, 0xd5, 0x13, 0x94, 0xa6, 0x2d,
	0xe5, 0x2a, 0xfa, 0x21, 0xf4, 0x67, 0xd9, 0x22, 0x4f, 0xc4, 0xa6, 0xdc, 0x26, 0xec, 0xf3, 0x6d,
	0x63, 0x4b, 0x4c, 0x7f, 0x46, 0xec, 0x2c, 0x11, 0xc9, 0x96, 0xc5, 0x3c, 0x11, 0xc9, 0xd1, 0x19,
	0xd8, 0x2d, 0x62, 0x09, 0x93, 0x00, 0x74, 0xa7, 0x11, 0x9d, 0x8c, 0x42, 0x77, 0x8f, 0xec, 0x03,
	0xc4, 0x74, 0x34, 0x9d, 0x5d, 0xc6, 0x97, 0xd1, 0xd4, 0xd5, 0x88, 0x03, 0xbd, 0x78, 0x74, 0x75,
	0x1e, 0xdd, 0x9e, 0x53, 0xb7, 0x43, 0x6c, 0xb0, 0xa2, 0x8b, 0x8b, 0xf0, 0x72, 0x7a, 0xee, 0xea,
	0x47, 0x1f, 0x9f, 0x5d, 0x13, 0xd2, 0x03, 0x23, 0x1c, 0xfd, 0xf8, 0xee, 0xee, 0x49, 0xbf, 0x6f,
	0x37, 0x11, 0xbd, 0x99, 0xb8, 0x1a, 0xb1, 0x40, 0x1f, 0x85, 0xa1, 0xdb, 0xb9, 0xef, 0xaa, 0xeb,
	0xf6, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0xdf, 0x04, 0xd0, 0xa8, 0x03, 0x00, 0x00,
}
