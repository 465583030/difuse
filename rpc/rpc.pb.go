// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chord "github.com/ipkg/go-chord"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DifuseRPC service

type DifuseRPCClient interface {
	GetTxBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	GetTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	NewTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	ProposeTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error)
	TakeoverTxBlocksServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_TakeoverTxBlocksServeClient, error)
}

type difuseRPCClient struct {
	cc *grpc.ClientConn
}

func NewDifuseRPCClient(cc *grpc.ClientConn) DifuseRPCClient {
	return &difuseRPCClient{cc}
}

func (c *difuseRPCClient) GetTxBlockServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/rpc.DifuseRPC/GetTxBlockServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) GetTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/rpc.DifuseRPC/GetTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) NewTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/rpc.DifuseRPC/NewTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) ProposeTxServe(ctx context.Context, in *chord.Payload, opts ...grpc.CallOption) (*chord.Payload, error) {
	out := new(chord.Payload)
	err := grpc.Invoke(ctx, "/rpc.DifuseRPC/ProposeTxServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *difuseRPCClient) TakeoverTxBlocksServe(ctx context.Context, opts ...grpc.CallOption) (DifuseRPC_TakeoverTxBlocksServeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DifuseRPC_serviceDesc.Streams[0], c.cc, "/rpc.DifuseRPC/TakeoverTxBlocksServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &difuseRPCTakeoverTxBlocksServeClient{stream}
	return x, nil
}

type DifuseRPC_TakeoverTxBlocksServeClient interface {
	Send(*chord.Payload) error
	CloseAndRecv() (*chord.Payload, error)
	grpc.ClientStream
}

type difuseRPCTakeoverTxBlocksServeClient struct {
	grpc.ClientStream
}

func (x *difuseRPCTakeoverTxBlocksServeClient) Send(m *chord.Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *difuseRPCTakeoverTxBlocksServeClient) CloseAndRecv() (*chord.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(chord.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DifuseRPC service

type DifuseRPCServer interface {
	GetTxBlockServe(context.Context, *chord.Payload) (*chord.Payload, error)
	GetTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	NewTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	ProposeTxServe(context.Context, *chord.Payload) (*chord.Payload, error)
	TakeoverTxBlocksServe(DifuseRPC_TakeoverTxBlocksServeServer) error
}

func RegisterDifuseRPCServer(s *grpc.Server, srv DifuseRPCServer) {
	s.RegisterService(&_DifuseRPC_serviceDesc, srv)
}

func _DifuseRPC_GetTxBlockServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetTxBlockServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DifuseRPC/GetTxBlockServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetTxBlockServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_GetTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).GetTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DifuseRPC/GetTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).GetTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_NewTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).NewTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DifuseRPC/NewTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).NewTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_ProposeTxServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chord.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifuseRPCServer).ProposeTxServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DifuseRPC/ProposeTxServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifuseRPCServer).ProposeTxServe(ctx, req.(*chord.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DifuseRPC_TakeoverTxBlocksServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DifuseRPCServer).TakeoverTxBlocksServe(&difuseRPCTakeoverTxBlocksServeServer{stream})
}

type DifuseRPC_TakeoverTxBlocksServeServer interface {
	SendAndClose(*chord.Payload) error
	Recv() (*chord.Payload, error)
	grpc.ServerStream
}

type difuseRPCTakeoverTxBlocksServeServer struct {
	grpc.ServerStream
}

func (x *difuseRPCTakeoverTxBlocksServeServer) SendAndClose(m *chord.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *difuseRPCTakeoverTxBlocksServeServer) Recv() (*chord.Payload, error) {
	m := new(chord.Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DifuseRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DifuseRPC",
	HandlerType: (*DifuseRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxBlockServe",
			Handler:    _DifuseRPC_GetTxBlockServe_Handler,
		},
		{
			MethodName: "GetTxServe",
			Handler:    _DifuseRPC_GetTxServe_Handler,
		},
		{
			MethodName: "NewTxServe",
			Handler:    _DifuseRPC_NewTxServe_Handler,
		},
		{
			MethodName: "ProposeTxServe",
			Handler:    _DifuseRPC_ProposeTxServe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TakeoverTxBlocksServe",
			Handler:       _DifuseRPC_TakeoverTxBlocksServe_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0x52, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x2c, 0xc8, 0x4e, 0xd7, 0x4f, 0xcf, 0xd7, 0x4d,
	0xce, 0xc8, 0x2f, 0x4a, 0xd1, 0xcf, 0x4b, 0x2d, 0x81, 0x28, 0x34, 0x9a, 0xc8, 0xc4, 0xc5, 0xe9,
	0x92, 0x99, 0x56, 0x5a, 0x9c, 0x1a, 0x14, 0xe0, 0x2c, 0x64, 0xcc, 0xc5, 0xef, 0x9e, 0x5a, 0x12,
	0x52, 0xe1, 0x94, 0x93, 0x9f, 0x9c, 0x1d, 0x9c, 0x5a, 0x54, 0x96, 0x2a, 0xc4, 0xa7, 0x07, 0xd6,
	0xa2, 0x17, 0x90, 0x58, 0x99, 0x93, 0x9f, 0x98, 0x22, 0x85, 0xc6, 0x57, 0x62, 0x10, 0xd2, 0xe3,
	0xe2, 0x02, 0x6b, 0x22, 0x41, 0xbd, 0x5f, 0x6a, 0x39, 0xf1, 0xea, 0x8d, 0xb8, 0xf8, 0x02, 0x8a,
	0xf2, 0x0b, 0xf2, 0x8b, 0x53, 0x89, 0xd7, 0x63, 0xcd, 0x25, 0x1a, 0x92, 0x98, 0x9d, 0x9a, 0x5f,
	0x96, 0x5a, 0x04, 0xf5, 0x4d, 0x31, 0x91, 0x5a, 0x35, 0x18, 0x93, 0xd8, 0xc0, 0x41, 0x63, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x9e, 0x3b, 0xa7, 0x50, 0x01, 0x00, 0x00,
}
