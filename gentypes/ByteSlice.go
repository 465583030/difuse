// automatically generated by the FlatBuffers compiler, do not modify

package gentypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ByteSlice struct {
	_tab flatbuffers.Table
}

func GetRootAsByteSlice(buf []byte, offset flatbuffers.UOffsetT) *ByteSlice {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ByteSlice{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ByteSlice) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ByteSlice) B(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ByteSlice) BLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ByteSlice) BBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ByteSliceStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ByteSliceAddB(builder *flatbuffers.Builder, B flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(B), 0)
}
func ByteSliceStartBVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ByteSliceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
