// automatically generated by the FlatBuffers compiler, do not modify

package gentypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VidTx struct {
	_tab flatbuffers.Table
}

func GetRootAsVidTx(buf []byte, offset flatbuffers.UOffsetT) *VidTx {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VidTx{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *VidTx) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VidTx) Vid(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *VidTx) VidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *VidTx) VidBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *VidTx) Tx(obj *Tx) *Tx {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Tx)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func VidTxStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VidTxAddVid(builder *flatbuffers.Builder, Vid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Vid), 0)
}
func VidTxStartVidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func VidTxAddTx(builder *flatbuffers.Builder, Tx flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Tx), 0)
}
func VidTxEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
